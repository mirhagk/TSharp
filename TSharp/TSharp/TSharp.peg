@namespace TSharp
@classname TSharpGrammar
@using Microsoft.CodeAnalysis;
@using Microsoft.CodeAnalysis.CSharp;
@using Microsoft.CodeAnalysis.CSharp.Syntax;


Start <SyntaxNode>
	= statements:(Statement*) {SyntaxFactory.Block(statements)}
Statement <StatementSyntax>
	= expr:Expr {SyntaxFactory.ExpressionStatement(expr)}
Expr <ExpressionSyntax> 
	= val:number {(val)}
number <LiteralExpressionSyntax>
	= val:([0-9]+) {SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression,SyntaxFactory.Literal(int.Parse(Flatten(val))))}
varOrConst = "var" / "const"
//variableDeclaration = varOrConst + idenList | varOrConst + idenList + setEqual | varOrConst + idenList + typeSpecifier | varOrConst + idenList + typeSpecifier + setEqual;
//Statement = Expr | variableDeclaration | ifBlock | functionCall | functionDefinition | io | assignment | result | loop | forLoop | newer | exitLoop