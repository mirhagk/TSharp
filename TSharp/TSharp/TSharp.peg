@namespace TSharp
@classname TSharpGrammar
@using Microsoft.CodeAnalysis;
@using Microsoft.CodeAnalysis.CSharp;
@using Microsoft.CodeAnalysis.CSharp.Syntax;


Start <SyntaxNode>
	= statements:(Statement*) {SyntaxFactory.Block(statements)}
Statement <StatementSyntax>
	= expr:Expr {SyntaxFactory.ExpressionStatement(expr)}
Expr <ExpressionSyntax> 
	= val:number {(val)}
number <LiteralExpressionSyntax>
	= ows val:([0-9]+) ows {SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression,SyntaxFactory.Literal(int.Parse(Flatten(val))))}
varOrConst = "var" / "const" ows
idenList  <SeparatedSyntaxList<VariableDeclaratorSyntax>>
	= idens:(identifier+) {SyntaxFactory.SeparatedList<VariableDeclaratorSyntax>(idens)}
identifier <VariableDeclaratorSyntax>
	= iden:([a-zA-Z]+) {SyntaxFactory.VariableDeclarator(Flatten(iden))}
variableDeclaration <VariableDeclarationSyntax>
	= varOrConst idens:idenList type:typeSpecifier { SyntaxFactory.VariableDeclaration(type,idens)}
typeSpecifier <TypeSyntax>
	= "int" {SyntaxFactory.ParseTypeName("int")}
ws = [ \t\n\r]
ows = ws*
//variableDeclaration = varOrConst + idenList | varOrConst + idenList + setEqual | varOrConst + idenList + typeSpecifier | varOrConst + idenList + typeSpecifier + setEqual;
//Statement = Expr | variableDeclaration | ifBlock | functionCall | functionDefinition | io | assignment | result | loop | forLoop | newer | exitLoop