IronTuring

What is IronTuring?
IronTuring is an implementation of Turing in the .NET framework. In the current pre-alpha stage, it is not yet compatible with Turing 4.1, but the goal is to make Turing 4.1 programs run in Turing 4.1 with little to no changes required.

Why .NET?
This choice is likely to cause some complaints, as .NET is Microsoft's baby, and therefore pure evil (somehow). Rewriting Turing from scratch gave a unique oppurtunity to upgrade many things in Turing, and make the language as a whole more modern, and easier to transtition from. The decision to use a virtual machine was an easy one to make, because it allows the language to be supported on any platform the virtual machine is supported, makes garbage collection and shared libraries supported right from the start, and JIT is already at par with compilation, with the possibility to actually be faster, so JIT may be the future of computing, might as well make Turing future ready.

That still doesn't explain why .NET specifically was chosen. There are a quite a few virtual machines that it could run on, but of them only a handful are widely used, modern and supported. The JVM and NET/MONO/DOTGNU are the two major candidates for it. I could go into upteen reasons why I chose .NET but that would just start a major war between JVM enthusiasts and .NET enthusiasts, and this isn't the place for that (if someone wants to start a new topic for this discussion I gladly would go into details), so let's just pretend the only difference between them is that I have much more experience with .NET

What's new?
Support for XNA, directX, threading, networking, openGL and any other .NET library. Probably the biggest new feature is the change of the import keyword, which is now able to import any .NET library (modules will be able to create a .NET library as well). Other than the import feature the biggest things are platform independence and garbage collection (for those of you who don't know what this is, it basically handles all of the memory for you so that you don't have to worry about freeing up objects and whatnot). It uses a new library in replacement to the old standard library, which uses GDI+ for all the drawing commands. This new library will be heavily refined and hopefully optimized, but using it you should already see a performance increase. The library will also be written to work with openGL or XNA and do all the drawing through the shader if you choose that version. This will give a huge performance boost, perhaps making Turing a valid language for making games in (also if done in XNA make turing games able to run on Xbox potentially).

Where can I get it?
A github page is in the process of being set up, but right now you can download a zip file containing the source code as well as the executable file. Simply call the IronTuring.exe file from the command line with your Turing file as input, or alter the file called "compile.bat" with notepad and change "test.t" to the path where you file is.

How can I help?
You can help in several ways. There are 2 major sections to the project, the grammar (created with Irony) and the compiler (which uses Reflection.Emit). Once the github page is live, you can branch the code there, and add your own changes. Other ways you can help are through testing it, using it instead of Turing 4.1 (which means added testing) and suggesting new features/library functions.
If you want to help programming, but don't know languages other than Turing, then you can help by recreating the Turing standard library in Turing (using openGL, XNA, GDI+ or any other common library), or by compiling new libraries and integrating the features into standardLibrary.0.1.ti which is the file that is by default included in all IronTuring v0.1 turing programs.

How does it work?
Irony provides a simple way to build a grammar. I will be the first to admit that I am doing a terrible job of making sure it's clean (you'll notice lot's of conflicts if you use the Irony grammar explorer). The grammar is then compiled into a parser, which is called by the compiler prior to any work being done there. Once the program is parsed, the compiler then walks through the tree of tokens, converting it to CIL instructions, using Reflection.Emit. Using Reflection.Emit allows the compiler to just compile a single method, or an entire assembly with little difference to the underlying code. This means that the compiler library can be called from any .NET application, passing in a string, and getting back a method, which could then be immediately called. This makes IronTuring useful as an interpreted language in any application.